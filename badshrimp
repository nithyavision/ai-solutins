from ultralytics import YOLO
import cv2
import numpy as np


model = YOLO('/content/drive/MyDrive/fishery_data/best (1).pt')


def detect_objects(frame):
    results = model(frame)  
    detected_objects = results[0].boxes  
    confidences = detected_objects.conf.cpu().numpy()  
    bboxes = detected_objects.xyxy.cpu().numpy()  

   
    valid_detections = bboxes[confidences >= 0.5] 

    return valid_detections


def draw_bounding_boxes(frame, detections):
    for det in detections:
        x1, y1, x2, y2 = map(int, det[:4]) 
      
        cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 0, 255), 2) 
    return frame

def process_video(input_video_path, output_video_path):
    cap = cv2.VideoCapture(input_video_path) 
    fourcc = cv2.VideoWriter_fourcc(*'mp4v')  
    fps = int(cap.get(cv2.CAP_PROP_FPS)) 
    frame_width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))  
    frame_height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT)) 

  
    out = cv2.VideoWriter(output_video_path, fourcc, fps, (frame_width, frame_height))

    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break 

        detections = detect_objects(frame)

        
        if detections.size > 0:
            frame = draw_bounding_boxes(frame, detections)

      
        out.write(frame)

   
    cap.release()
    out.release()
    print("Video processing complete. Output saved at:", output_video_path)


input_video_path = '/content/drive/MyDrive/fishery_data/short_shrimp_cleaning.mp4' 
output_video_path = '/content/short_shrimp_output.mp4'  
process_video(input_video_path, output_video_path)
